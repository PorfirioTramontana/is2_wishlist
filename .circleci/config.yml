version: 2

jobs:
    # The build job
    build:
        working_directory: ~/workspace
        docker:
            - image: circleci/node:12.13.1-browsers # same version of node in docker
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore local dependencies from cache
            - restore_cache:
                keys:
                - v1-dependencies-{{ checksum "client/package.json" }}
                - v1-dependencies-
            # Install project dependencies
            - run:
                name: Install local dependencies
                command: cd client && npm install
            # Cache local dependencies if they don't exist
            - save_cache:
                key: v1-dependencies-{{ checksum "client/package.json" }}
                paths:
                    - client/node_modules
            # Lint the source code
            # - run:
            #     name: Linting
            #     command: cd client && npm run lint
            # Test the source code
            # - run:
            #     name: Testing
            #     command: npm run test
            # Build project with different configuration based on
            # the current branch
            - run:
                name: Building
                command: cd client && npm run build

                # command: |
                #     if [ "${CIRCLE_BRANCH}" == "staging" ]; then
                #         cd client && npm run build-qa
                #     elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                #         cd client && npm run build-prod
                #     else
                #         cd client && npm run build-dev
                #     fi
            # Cache the dist folder for the deploy job
            - save_cache:
                key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
                paths:
                    - dist

            - run:
                name: Start mock server in background # Race condition
                command: cd client && npm run mock-server
                background: true


            - run:
                name: Install dockerize for Mock Server execution
                command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
                environment:
                    DOCKERIZE_VERSION: v0.3.0
            - run:
                name: Wait for mock server
                command: dockerize -wait tcp://localhost:3000 -timeout 1m


            - run:
                name: Deploy master to Firebase
                command: cd client && firebase deploy --token=$FIREBASE_DEPLOY_TOKEN

            - run:
                name: Regression Tests
                command: cd client && npm run e2e


    # test-with-robot:
    #     docker:
    #         - image: circleci/python:3.6.2-stretch-browsers
    #     steps:
    #         - checkout
    #         - restore_cache:
    #             key: deps2-{{ .Branch }}-{{ checksum "requirements/robotframework.txt" }}
    #         - run: pip install -r requirements/robotframework.txt
    #         - save_cache:
    #             key: deps2-{{ .Branch }}-{{ checksum "requirements/robotframework.txt" }}
    #             paths:
    #                 - requirements
        

        
    
    # The deploy job
    # deploy:
    #     working_directory: ~/project
    #     docker:
    #         - image: circleci/node:6.10-browsers
    #     steps:
    #         # Log the current branch
    #         - run:
    #             name: Show current branch
    #             command: echo ${CIRCLE_BRANCH}
    #         # Restore cache from the build job which contains the
    #         # dist folder that needs to be deployed
    #         - restore_cache:
    #             key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
    #         # Install AWS cli
    #         - run:
    #             name: Install aws cli
    #             command:
    #                 sudo apt-get -y -qq install awscli
    #         # Set the signature version for the S3 auth
    #         - run:
    #             name: Setting Signature Version 4 for S3 Request Authentication
    #             command: aws configure set default.s3.signature_version s3v4
    #         # Deploy to the S3 bucket corresponding to the current branch
    #         - run:
    #             name: Deploy to S3
    #             command: |
    #                 if [ "${CIRCLE_BRANCH}" == "develop" ]; then
    #                     aws --region eu-west-2 s3 sync dist s3://project-dev/ --delete
    #                 elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
    #                     aws --region eu-west-2 s3 sync dist s3://project-qa/ --delete
    #                 elif [ "${CIRCLE_BRANCH}" == "master" ]; then
    #                     aws --region eu-west-2 s3 sync dist s3://project/ --delete
    #                 fi

workflows:
    version: 2
    
    build:
        jobs:
            - build
            # - test-with-robot:
            #     requires:
            #         - build

    # build_and_lint:
    #     jobs:
    #         - build
    
    # The build and deploy workflow
    # build_and_deploy:
    #     jobs:
    #         - build
    #         # The deploy job will only run on the filtered branches and
    #         # require the build job to be successful before it starts
    #         - deploy:
    #             requires:
    #                 - build
    #             filters:
    #                 branches:
    #                     only:
    #                         - develop
    #                         - staging
    #                         - master
                            
# # Javascript Node CircleCI 2.0 configuration file
# #
# # Check https://circleci.com/docs/2.0/language-javascript/ for more details
# #
# version: 2
# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#       - image: circleci/node:7.10

#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # - image: circleci/mongo:3.4.4

#     working_directory: ~/repo

#     steps:
#       - checkout

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#             - v1-dependencies-{{ checksum "package.json" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-

#       - run: yarn install

#       - save_cache:
#           paths:
#             - node_modules
#           key: v1-dependencies-{{ checksum "package.json" }}

#       # run tests!
#       - run: yarn test